(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{211:function(e,t,v){"use strict";v.r(t);var l=v(6),_=Object(l.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h3",{attrs:{id:"获取dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取dom"}},[e._v("#")]),e._v(" 获取DOM")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("getElementById()            // 得到单个节点")])]),e._v(" "),v("li",[v("p",[e._v("getElementsByTagName()     // 得到节点数组")])]),e._v(" "),v("li",[v("p",[e._v("getElementsByName()        // 得到节点数组")])]),e._v(" "),v("li",[v("p",[e._v("querySelector()            // 得到单个节点，如果找到多个则返回第一个")])]),e._v(" "),v("li",[v("p",[e._v("querySelectorAll()         // 得到节点数组，可以是多个参数")])])]),e._v(" "),v("p",[e._v("需要注意的是它们的参数，后两个的参数是CSS选择器")]),e._v(" "),v("h4",{attrs:{id:"查找子节点："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查找子节点："}},[e._v("#")]),e._v(" 查找子节点：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Node.childNodes")])]),e._v(" "),v("li",[v("p",[e._v("获取子节点列表NodeList；注意换行在浏览器中被算作了text节点，如果用这种方式获取节点列表，需要进行过滤。")])]),e._v(" "),v("li",[v("p",[e._v("访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。如果选定的节点没有子节点，则该属性返回不包含节点的 NodeList。")])]),e._v(" "),v("li",[v("p",[e._v("Node.firstChild           // 返回第一个子节点")])]),e._v(" "),v("li",[v("p",[e._v("Node.lastChild            //返回最后一个子节点")])])]),e._v(" "),v("h4",{attrs:{id:"查找父节点："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查找父节点："}},[e._v("#")]),e._v(" 查找父节点：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Node.parentNode             // 返回父节点")])]),e._v(" "),v("li",[v("p",[e._v("Node.ownerDocument          //返回祖先节点（整个document）")])])]),e._v(" "),v("h4",{attrs:{id:"查找同胞节点："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查找同胞节点："}},[e._v("#")]),e._v(" 查找同胞节点：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Node.previousSibling       // 返回前一个节点，如果没有则返回null")])]),e._v(" "),v("li",[v("p",[e._v("Node.nextSibling          // 返回后一个节点")])])]),e._v(" "),v("h4",{attrs:{id:"创建节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建节点"}},[e._v("#")]),e._v(" 创建节点")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("createElement()                   //创建一个元素节点")])]),e._v(" "),v("li",[v("p",[e._v("createTextNode()                  //创建文本节点")])]),e._v(" "),v("li",[v("p",[e._v("createDocumentFragment()          //创建虚拟节点")])]),e._v(" "),v("li",[v("p",[e._v("cloneNode=Node.cloneNode(boolean) //克隆节点，ture表示克隆该节点及其所有子节点,false只复制本节点")])])]),e._v(" "),v("h4",{attrs:{id:"插入节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入节点"}},[e._v("#")]),e._v(" 插入节点")]),e._v(" "),v("p",[v("code",[e._v("/*插入node*/")])]),e._v(" "),v("ul",[v("li",[v("p",[e._v("parentNode.appendChild(childNode);              // 将新节点追加到子节点列表的末尾")])]),e._v(" "),v("li",[v("p",[e._v("parentNode.insertBefore(newNode, targetNode);   // 将newNode插入targetNode之前")])])]),e._v(" "),v("p",[v("code",[e._v("/*插入html代码*/")])]),e._v(" "),v("ul",[v("li",[v("p",[e._v("node.insertAdjacentHTML('beforeBegin', html);    // 在该元素开始标签之前插入代码")])]),e._v(" "),v("li",[v("p",[e._v("node.insertAdjacentHTML('afterBegin', html);    // 在该元素的开始标签之后插入代码")])]),e._v(" "),v("li",[v("p",[e._v("node.insertAdjacentHTML('beforeEnd', html);     // 在该元素的结束标签之前插入代码")])]),e._v(" "),v("li",[v("p",[e._v("node.insertAdjacentHTML('afterEnd', html);      // 在该元素结束标签之后插入代码")])]),e._v(" "),v("li",[v("p",[e._v("Node.innerHTML='html'                           // 与node.insertAdjacentHTML('afterBegin', html)效果相同")])]),e._v(" "),v("li",[v("p",[e._v("docment.write()                                 //在body中插入内容")])])]),e._v(" "),v("h4",{attrs:{id:"替换节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#替换节点"}},[e._v("#")]),e._v(" 替换节点")]),e._v(" "),v("p",[e._v("parentNode.replace(newNode, targetNode);          // 使用newNode替换targetNode")]),e._v(" "),v("h4",{attrs:{id:"删除dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除dom"}},[e._v("#")]),e._v(" 删除DOM")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("parentNode.removeChild(childNode);              // 移除目标节点")])]),e._v(" "),v("li",[v("p",[e._v("node.parentNode.removeChild(node);             //在不清楚父节点的情况下使用")])])]),e._v(" "),v("h4",{attrs:{id:"属性节点操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#属性节点操作"}},[e._v("#")]),e._v(" 属性节点操作")]),e._v(" "),v("p",[e._v("直接获取css样式：node.style.color")]),e._v(" "),v("p",[e._v("style本身的属性和方法：")]),e._v(" "),v("p",[e._v("node.style.cssText   //获取元素css样式的字符串")]),e._v(" "),v("p",[e._v("node.style.length    //获取样式个数")]),e._v(" "),v("ul",[v("li",[e._v("注意以上这种方式只能获取内联样式")])]),e._v(" "),v("p",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle",target:"_blank",rel:"noopener noreferrer"}},[e._v("getComputedStyle"),v("OutboundLink")],1),e._v("可以用来获取最终浏览器计算得到的样式。")]),e._v(" "),v("p",[e._v("getComputedStyle是window的方法。它能够获取当前元素所有最终使用的CSS属性值，但是是只读的。它有两个参数，第一个为传入的节点，第二个可以传入:hover, :blur等获取其伪类样式，如果没有则传入null。")]),e._v(" "),v("p",[e._v("IE不支持"),v("code",[e._v("getComputedStyle")]),e._v("方法，可以使用"),v("code",[e._v("currentStyle")]),e._v("来保持兼容性。")]),e._v(" "),v("p",[e._v("语法为："),v("code",[e._v("window.getComputedStyle ? window.getComputedStyle(node, null) : node.currentStyle")]),e._v("。")]),e._v(" "),v("h4",{attrs:{id:"获取和修改样式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取和修改样式"}},[e._v("#")]),e._v(" 获取和修改样式")]),e._v(" "),v("p",[e._v("HTML5提供了一个新属性："),v("code",[e._v("classList")]),e._v("来实现对元素样式的增删改查。")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("node.classList.add(value);          // 为元素添加指定的类")])]),e._v(" "),v("li",[v("p",[e._v("node.classList.contains(value);     // 判断元素是否含有指定的类，如果存在返回true")])]),e._v(" "),v("li",[v("p",[e._v("node.classList.remove(value);       // 删除指定的类")])]),e._v(" "),v("li",[v("p",[e._v("node.classList.toggle(value);       // 有就删除，没有就添加指定类")])])]),e._v(" "),v("h4",{attrs:{id:"dom特定属性的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom特定属性的方法"}},[e._v("#")]),e._v(" DOM特定属性的方法")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("elementNode.getAttribute(name)                         //  name：要想查询的元素节点的属性名字")])]),e._v(" "),v("li",[v("p",[e._v("elementNode.setAttribute(name,value)                   // setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。")])]),e._v(" "),v("li",[v("p",[e._v("elementNode.removeAttribute()")])]),e._v(" "),v("li",[v("p",[e._v("elementNode.attributes                                 // 获取DOM全部特性")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);